{"version":3,"sources":["resources/tomato.svg","Sites/Pomodoro/Pomodoro.jsx","Sites/MC2/functions/cipherFunctions.js","Sites/MC2/components/StatelessComponents.jsx","Sites/MC2/Chiper.jsx","App/AppRouter.jsx","App/App.jsx","service/serviceWorker.js","index.jsx"],"names":["module","exports","__webpack_require__","p","Pomodoro","document","title","react_default","a","createElement","Fragment","className","titel","src","promodoro","alt","App_BottomLinks","Component","decode","input","code","y","output","i","length","charCodeAt","replaceAt","String","fromCharCode","encode","x","Header","PythonLink","href","target","rel","prototype","index","replacement","this","substr","Cipher","state","inputField","outputField","passwordField","handleChange","event","field","_this","setState","Object","defineProperty","name","value","handleButtonClick","TextFields","onChange","type","onClick","readOnly","AppRouter","HashRouter","props","routes","map","route","Route","path","exact","component","BottomLinks","App","components","App_AppRouter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+QC6BzBC,qMAtBXC,SAASC,MAAQ,kDAGjB,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,OACEG,MAAM,oCACNC,IAAKC,IACLH,UAAU,WACVI,IAAI,SAENR,EAAAC,EAAAC,cAAA,KAAGE,UAAU,6BAAb,qCACAJ,EAAAC,EAAAC,cAACO,EAAD,gBAhBWC,sBCLvB,SAASC,EAAOC,EAAOC,GAOrB,IANA,IAIIC,EAJAC,EAASH,EAMJI,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,GAAK,GACjCJ,EAAMM,WAAWF,IAAM,IAAMJ,EAAMM,WAAWF,IAAM,OACtDA,GAAK,IAIPF,EAFIF,EAAMM,WAAWF,GAAK,IACpBH,EAAKK,WAAWF,EAAIH,EAAKI,QAAU,KAEjC,IAAGH,GAAK,KAChBA,GAAK,IACLC,EAASA,EAAOI,UAAUH,EAAGI,OAAOC,aAAaP,EAAI,KAGvD,OAAOC,EAGT,SAASO,EAAOV,EAAOC,GAMrB,IALA,IAEIU,EAFAR,EAASH,EAKJI,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,GAAK,GACjCJ,EAAMM,WAAWF,IAAM,IAAMJ,EAAMM,WAAWF,IAAM,OACtDA,GAAK,GAIPO,IAFAA,EAAIX,EAAMM,WAAWF,GAAK,KACpBH,EAAKK,WAAWF,EAAIH,EAAKI,QAAU,KACzB,IAChBF,EAASA,EAAOI,UAAUH,EAAGI,OAAOC,aAAaE,EAAI,KAGvD,OAAOR,ECnCT,SAASS,IACP,OACExB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,uCAAd,iBACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,oCAAb,oDAON,SAASqB,IACP,OACEzB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,KACEE,UAAU,4CACVsB,KAAK,qFACLC,OAAO,SACPC,IAAI,uBAEJ5B,EAAAC,EAAAC,cAAA,iDDkBRkB,OAAOS,UAAUV,UAAY,SAASW,EAAOC,GAC3C,OAAOC,KAAKC,OAAO,EAAGH,GAASC,EAAcC,KAAKC,OAAOH,EAAQC,EAAYd,mBE8ChEiB,6MAhFbC,MAAQ,CACNC,WAAY,GACZC,YAAa,GACbC,cAAe,MAOjBC,aAAe,SAACC,EAAOC,GACrBC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBJ,EAAMb,OAAOmB,KAAON,EAAMb,OAAOoB,WAGpDC,kBAAoB,SAAAR,GACQ,eAAtBA,EAAMb,OAAOmB,KACfJ,EAAKC,SAAS,CAAEN,YAAaf,EAAOoB,EAAKP,MAAMC,WAAYM,EAAKP,MAAMG,iBACvC,eAAtBE,EAAMb,OAAOmB,MACtBJ,EAAKC,SAAS,CAAEN,YAAa1B,EAAO+B,EAAKP,MAAMC,WAAYM,EAAKP,MAAMG,oBAI1EW,WAAa,kBACXjD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kDAAb,yBACAJ,EAAAC,EAAAC,cAAA,YACE4C,KAAK,aACLC,MAAOL,EAAKP,MAAMC,WAClBc,SAAUR,EAAKH,aACfnC,UAAU,uCAEZJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kDAAb,aACAJ,EAAAC,EAAAC,cAAA,SACE4C,KAAK,gBACLC,MAAOL,EAAKP,MAAMG,cAClBY,SAAUR,EAAKH,aACfnC,UAAU,mBACV+C,KAAK,SAEPnD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uCACbJ,EAAAC,EAAAC,cAAA,UACE4C,KAAK,aACLM,QAASV,EAAKM,kBACd5C,UAAU,mDACV+C,KAAK,UAJP,cAQAnD,EAAAC,EAAAC,cAAA,UACE4C,KAAK,aACLM,QAASV,EAAKM,kBACd5C,UAAU,mDACV+C,KAAK,UAJP,gBAUJnD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kDAAb,WACAJ,EAAAC,EAAAC,cAAA,YAAU6C,MAAOL,EAAKP,MAAME,YAAajC,UAAU,WAAW+C,KAAK,OAAOE,UAAQ,0FAtDtFvD,SAASC,MAAQ,+CA4DjB,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gEACbJ,EAAAC,EAAAC,cAACsB,EAAD,MACAxB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,+BACbJ,EAAAC,EAAAC,cAAA,WAAM8B,KAAKiB,cACXjD,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAACO,EAAD,eA1EWC,6BCWN4C,mLAZX,OACEtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,KACEvD,EAAAC,EAAAC,cAAA,WACG8B,KAAKwB,MAAMC,OAAOC,IAAI,SAAAC,GAAK,OAC1B3D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAOC,KAAMF,EAAME,KAAMC,OAAK,EAACC,UAAWJ,EAAMI,uBANpCrD,aCGlBsD,SAAc,kBAClBhE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAAkBsB,KAAK,MAApC,QAGA1B,EAAAC,EAAAC,cAAA,KACEE,UAAU,kBACVsB,KAAK,0BACLC,OAAO,SACPC,IAAI,uBAJN,kBAQA5B,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAAkBsB,KAAK,SAApC,wBAyBWuC,6MAlBb9B,MAAQ,CACN+B,WAAY,CACV,CACEL,KAAM,IACNE,UAAWlE,GAEb,CACEgE,KAAM,OACNE,UAAW7B,6EAMf,OAAOlC,EAAAC,EAAAC,cAACiE,EAAD,CAAWV,OAAQzB,KAAKG,MAAM+B,oBAfvBxD,aCdE0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO1E,EAAAC,EAAAC,cAACyE,EAAD,MAAS7E,SAAS8E,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4ab8e7e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tomato.78df75cb.svg\";","import React, { Component } from 'react';\nimport promodoro from '../../resources/tomato.svg';\nimport { BottomLinks } from '../../App/App';\nimport 'bulma/css/bulma.css';\n\nclass Pomodoro extends Component {\n  componentDidMount() {\n    document.title = 'Pomodoro Timer';\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img\n              titel=\"designed by Freepik from Flaticon\"\n              src={promodoro}\n              className=\"App-logo\"\n              alt=\"logo\"\n            />\n            <p className=\"section subtitle is-small\">designed by Freepik from Flaticon</p>\n            <BottomLinks />\n          </header>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Pomodoro;\n","function decode(input, code) {\n  let output = input;\n\n  let x;\n  let key;\n  let y;\n\n  for (let i = 0; i < input.length; i += 1) {\n    if (input.charCodeAt(i) <= 32 || input.charCodeAt(i) >= 226) {\n      i += 1;\n    }\n    x = input.charCodeAt(i) - 33;\n    key = code.charCodeAt(i % code.length) - 33;\n    y = x - key;\n    if (y < 0) y += 193;\n    y %= 193;\n    output = output.replaceAt(i, String.fromCharCode(y + 33));\n  }\n\n  return output;\n}\n\nfunction encode(input, code) {\n  let output = input;\n\n  let x;\n  let key;\n\n  for (let i = 0; i < input.length; i += 1) {\n    if (input.charCodeAt(i) <= 32 || input.charCodeAt(i) >= 226) {\n      i += 1;\n    }\n    x = input.charCodeAt(i) - 33;\n    key = code.charCodeAt(i % code.length) - 33;\n    x = (x + key) % 193;\n    output = output.replaceAt(i, String.fromCharCode(x + 33));\n  }\n\n  return output;\n}\n\nString.prototype.replaceAt = function(index, replacement) {\n  return this.substr(0, index) + replacement + this.substr(index + replacement.length);\n};\n\nexport { encode, decode };\n","import React from 'react';\nimport 'bulma/css/bulma.css';\n\nfunction Header() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title is-3 is-spaced has-text-white\">MC-2.0 Cipher</h1>\n      <p className=\"subtitle is-4 has-text-white-ter\">\n        a low-level string encryption based on vigenere\n      </p>\n    </div>\n  );\n}\n\nfunction PythonLink() {\n  return (\n    <div className=\"section\">\n      <a\n        className=\"has-text-info has-text-left subtitle is-3\"\n        href=\"https://drive.google.com/file/d/12FUF_74zSd7J3KBtSvkC8TGALyL-KMHV/view?usp=sharing\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <u>Python Version for File Encryption</u>\n      </a>\n    </div>\n  );\n}\n\nexport { PythonLink, Header };\n","import React, { Component } from 'react';\nimport { encode, decode } from './functions/cipherFunctions';\nimport { PythonLink, Header } from './components/StatelessComponents';\nimport { BottomLinks } from '../../App/App';\nimport 'bulma/css/bulma.css';\nimport './MC2.css';\n\nclass Cipher extends Component {\n  state = {\n    inputField: '',\n    outputField: '',\n    passwordField: ''\n  };\n\n  componentDidMount() {\n    document.title = 'MC-2 Cipher';\n  }\n\n  handleChange = (event, field) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleButtonClick = event => {\n    if (event.target.name === 'encryption') {\n      this.setState({ outputField: encode(this.state.inputField, this.state.passwordField) });\n    } else if (event.target.name === 'decryption') {\n      this.setState({ outputField: decode(this.state.inputField, this.state.passwordField) });\n    }\n  };\n\n  TextFields = () => (\n    <div className=\"columns\">\n      <div className=\"column is-half\">\n        <p className=\"has-text-white-ter has-text-left subtitle is-5\">Enter your text here:</p>\n        <textarea\n          name=\"inputField\"\n          value={this.state.inputField}\n          onChange={this.handleChange}\n          className=\"form-control textarea upperTextbox\"\n        />\n        <p className=\"has-text-white-ter has-text-left subtitle is-5\">Password:</p>\n        <input\n          name=\"passwordField\"\n          value={this.state.passwordField}\n          onChange={this.handleChange}\n          className=\"input is-primary\"\n          type=\"text\"\n        />\n        <div className=\"columns innerColumnsStyle is-mobile\">\n          <button\n            name=\"encryption\"\n            onClick={this.handleButtonClick}\n            className=\"column button is-white is-fullwidth stylesButton\"\n            type=\"button\"\n          >\n            encryption\n          </button>\n          <button\n            name=\"decryption\"\n            onClick={this.handleButtonClick}\n            className=\"column button is-white is-fullwidth stylesButton\"\n            type=\"button\"\n          >\n            decryption\n          </button>\n        </div>\n      </div>\n      <div className=\"column is-half\">\n        <p className=\"has-text-white-ter has-text-left subtitle is-5\">Result:</p>\n        <textarea value={this.state.outputField} className=\"textarea\" type=\"text\" readOnly />\n      </div>\n    </div>\n  );\n\n  render() {\n    return (\n      <div className=\"cipher-header section has-background-black has-text-centered\">\n        <Header />\n        <div className=\"container section is-medium\">\n          <div>{this.TextFields()}</div>\n          <PythonLink />\n          <BottomLinks />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Cipher;\n","import React, { Component } from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { Route } from 'react-router-dom';\n\nclass AppRouter extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          {this.props.routes.map(route => (\n            <Route path={route.path} exact component={route.component} />\n          ))}\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default AppRouter;\n","import React, { Component } from 'react';\nimport Pomodoro from '../Sites/Pomodoro/Pomodoro';\nimport Cipher from '../Sites/MC2/Chiper';\nimport AppRouter from './AppRouter';\nimport './App.css';\nimport 'bulma/css/bulma.css';\n\nconst BottomLinks = () => (\n  <div className=\"columns\">\n    <a className=\"App-link column\" href=\"#/\">\n      Home\n    </a>\n    <a\n      className=\"App-link column\"\n      href=\"http://tomato-timer.com\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Pomodoro Timer\n    </a>\n    <a className=\"App-link column\" href=\"#/mc2\">\n      Advanced Vigenere\n    </a>\n  </div>\n);\n\nclass App extends Component {\n  state = {\n    components: [\n      {\n        path: '/',\n        component: Pomodoro\n      },\n      {\n        path: '/mc2',\n        component: Cipher\n      }\n    ]\n  };\n\n  render() {\n    return <AppRouter routes={this.state.components} />;\n  }\n}\n\nexport default App;\n\nexport { BottomLinks };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './service/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}